'use strict';

exports.__esModule = true;

var _class, _temp; // --- SUPER REACT GIST ---
// Simple and flexible component that allows you to embed GitHub Gists in React projects.

// -- IMPORTS --
// - GLOBAL -


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// -- MAIN --
// Extending PureComponent allow us to prevent re-rendering when the props DONT change.
var Gist = (_temp = _class = function (_React$PureComponent) {
  _inherits(Gist, _React$PureComponent);

  function Gist(props) {
    _classCallCheck(this, Gist);

    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));

    _this.url = props.url;
    _this.file = props.file;
    _this.stylesheetAdded = false; // Ensures we only add the Gist's stylesheet one time.
    _this.state = {
      loading: true, // We have not fetched the Gist yet.
      gistContent: '' // Raw HTML of the Gist.
    };
    return _this;
  }

  // Each time we request a new Gist, we have to provide a new
  // global function name to serve as the JSONP callback.


  // Unique identifier of each JSONP callback.
  Gist.__nextGist = function __nextGist() {
    return "embed_gist_callback_" + Gist.__gistCallbackId++;
  };

  // The Gist JSON data includes a stylesheet file.
  // We ensure to add that file only one time in our page.


  Gist.__addStylesheet = function __addStylesheet(href) {
    if (!this.stylesheetAdded) {
      var link = document.createElement('link');
      link.type = "text/css";
      link.rel = "stylesheet";
      link.href = href;
      document.head.appendChild(link);
      this.stylesheetAdded = true;
    }
  };

  Gist.prototype.componentDidMount = function componentDidMount() {
    // Request the Gist iframe.
    this._buildGist();
  };

  Gist.prototype._getID = function _getID() {
    // Extract a string in form `username/uniqueValue`
    // from the provided Gist url.
    return this.url.match(/(\.com\/)(.*?)([^#]+)/).pop();
  };

  Gist.prototype._getFile = function _getFile() {
    // If `file` prop was provided return that.
    if (this.file != null) {
      return '&file=' + this.file;
    }

    // Else construct the file parameter from the `url` prop.
    var file = this.url.split('#').pop();

    // If the file parameter exist in Gist url return that file.
    if (file.match(/file*/) != null) {
      return '&file=' + file.replace('file-', '').replace('-', '.');
    }

    // Else the user wants to link the whole Gist repository.
    return '';
  };

  Gist.prototype._tranformedURL = function _tranformedURL(gistCallback) {
    // Construct a gist url that will allow us to redner the Gist into our page.
    var id = this._getID();
    var file = this._getFile();
    return 'https://gist.github.com/' + id + '.json?callback=' + gistCallback + file;
  };

  Gist.prototype._buildGist = function _buildGist() {
    var _this2 = this;

    var gistCallback = Gist.__nextGist();
    window[gistCallback] = function (gist) {
      Gist.__addStylesheet(gist.stylesheet);
      _this2.setState({
        loading: false,
        gistContent: gist.div
      });
    };

    var gistScript = document.createElement('script');
    gistScript.type = 'text/javascript';
    gistScript.src = this._tranformedURL(gistCallback);
    document.head.appendChild(gistScript);
  };

  Gist.prototype.render = function render() {
    if (this.state.loading) {
      return _react2.default.createElement(
        'div',
        null,
        '...waiting for Gist...'
      );
    } else {
      // Render as html.
      // https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml
      return _react2.default.createElement('div', { dangerouslySetInnerHTML: { __html: this.state.gistContent } });
    }
  };

  return Gist;
}(_react2.default.PureComponent), _class.__gistCallbackId = 0, _temp);

// - PROP TYPES -

Gist.propTypes = process.env.NODE_ENV !== "production" ? {
  url: _propTypes2.default.string.isRequired,
  file: _propTypes2.default.string

  // -- EXPORTS --
} : {};exports.default = Gist;
module.exports = exports['default'];